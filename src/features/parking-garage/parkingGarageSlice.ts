import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

// api
import { getTicket, payTicket, gateCheckout } from './parkingGarageAPI';

// types
import { RootState, AppThunk } from '../../app/store';
import { SetNonNullable } from 'type-fest';

// utils
import { calculateTicketPrice, getFormattedPaymentDate, calculateTicketState } from './ParkingGarage.utils';

export const PARKING_CAPACITY = 54;

export enum ErrorCode {
	FULL_PARKING_GARAGE = 'The parking garage is already full, there are no more parking spaces available.'
}

export enum PaymentMethod {
	CREDIT_CARD = 'CREDIT_CARD',
	DEBIT_CARD = 'DEBIT_CARD',
	CASH = 'CASH',
}

export enum TicketState {
	PAID = 'PAID',
	UNPAID = 'UNPAID',
}

export type BarCode = string;

interface Payment {
	paymentDate: number;
	paymentMethod: PaymentMethod;
}

export interface Ticket {
	barCode: BarCode;
	dateOfIssuance: number;
	payment?: Payment;
}

export interface ParkingSpace {
	spaceNumber: number;
	barCode: BarCode | null;
}

export interface ParkingGarageState {
	parkingSpaces: ParkingSpace[];
	currentlyIssuedTickets: Record<BarCode, Ticket>;
}

export const initialState: ParkingGarageState = {
	parkingSpaces: [...Array(PARKING_CAPACITY)].map((_, index: number) => ({
		spaceNumber: index,
		barCode: null,
	})),
	currentlyIssuedTickets: {},
};

export const ParkingGarageSlice = createSlice({
	name: 'parkingGarage',
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(getTicketAsync.fulfilled, (state, action) => {
				const ticket = action.payload;
				state.currentlyIssuedTickets[ticket.barCode] = ticket;
			})
			.addCase(payTicketAsync.fulfilled, (state, action) => {
				const ticket = action.payload;
				state.currentlyIssuedTickets[ticket.barCode] = ticket;
			})
			.addCase(parkAsync.fulfilled, (state, action) => {
				const { spaceNumber, barCode } = action.payload;
				state.parkingSpaces[spaceNumber].barCode = barCode;
			})
			.addCase(leaveAsync.fulfilled, (state, action) => {
				const { spaceNumber, ticketState } = action.payload;
				if (ticketState === TicketState.PAID) {
					state.parkingSpaces[spaceNumber].barCode = null;
				}
			})
			.addCase(gateCheckoutAsync.fulfilled, (state, action) => {
				const { ticketState, ticket } = action.payload;
				if (ticketState === TicketState.PAID) {
					delete state.currentlyIssuedTickets[ticket.barCode];
				}
			});
	},
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.ParkingGarage.value)`
export const selectParkingSpaces = (state: RootState) => state.parkingGarage.parkingSpaces;
export const selectTicketWithBarCode = (barCode: BarCode) => (state: RootState) =>
	state.parkingGarage.currentlyIssuedTickets[barCode]
		? state.parkingGarage.currentlyIssuedTickets[barCode]
		: null;
export const selectAmountOfFreeParkingSpaces = (state: RootState) =>
	state.parkingGarage.parkingSpaces.length - Object.keys(state.parkingGarage.currentlyIssuedTickets).length;

export const getTicketAsync = createAsyncThunk<
	Ticket,
	undefined,
	{ state: RootState }
>(
	'parkingGarage/getTicket',
	async (_, { getState, dispatch }) => {
		const amountOfFreeParkingSpaces = selectAmountOfFreeParkingSpaces(getState());
		if (amountOfFreeParkingSpaces === 0) {
			throw new Error(ErrorCode.FULL_PARKING_GARAGE);
		}
		const response = await getTicket();
		if (response.ok) {
			return response.ticket;
		}
		else {
			throw new Error(response.statusText);
		}
	}
);

export const parkAsync = createAsyncThunk<
	SetNonNullable<ParkingSpace, 'barCode'>,
	{ spaceNumber: number },
	{ state: RootState }
>(
	'parkingGarage/park',
	async ({ spaceNumber }, { getState, dispatch }) => {
		const ticket = await dispatch(getTicketAsync()).unwrap();
		console.log('Welcome!');
		return {
			spaceNumber,
			barCode: ticket.barCode,
		};
	}
);

export const gateCheckoutAsync = createAsyncThunk<
	{ ticketState: TicketState; ticket: Ticket },
	{ ticket: Ticket; },
	{ state: RootState }
>(
	'parkingGarage/gateCheckout',
	async ({ ticket }, { getState }) => {
		const response = await gateCheckout(ticket);
		if (response.ok) {
			if (response.success) {
				return {
					ticketState: TicketState.PAID,
					ticket,
				};
			}
			else {
				return {
					ticketState: TicketState.UNPAID,
					ticket,
				};
			}
		}
		else {
			throw new Error(response.statusText);
		}
	}
);

export const payTicketAsync = createAsyncThunk<
	Ticket,
	{ barCode: BarCode; paymentMethod: PaymentMethod },
	{ state: RootState }
>(
	'parkingGarage/payTicket',
	async ({ barCode, paymentMethod }, { getState }) => {
		const ticket = selectTicketWithBarCode(barCode)(getState());
		if (ticket) {
			const response = await payTicket(ticket, paymentMethod);
			if (response.ok) {
				return {
					...ticket,
					payment: {
						paymentMethod,
						paymentDate: response.paymentDate,
					},
				}
			}
			else {
				throw new Error(response.statusText);
			}
		}
		else {
			throw new Error('Ticket cannot be found!');
		}
	}
);

export const leaveAsync = createAsyncThunk<
	{ spaceNumber: number; ticketState: TicketState },
	{ spaceNumber: number; paymentMethod: PaymentMethod, barCode: string; },
	{ state: RootState }
>(
	'parkingGarage/leave',
	async ({ spaceNumber, paymentMethod, barCode }, { getState, dispatch }) => {
		const ticket = selectTicketWithBarCode(barCode)(getState());
		if (ticket) {
			const ticketPrice = dispatch(calculatePrice(ticket.barCode));
			console.log('ticketPrice', ticketPrice);
			await dispatch(payTicketAsync({ barCode: ticket.barCode, paymentMethod })).unwrap();
			const payedTicket = selectTicketWithBarCode(ticket.barCode)(getState());
			if (payedTicket) {
				const { ticketState } = await dispatch(gateCheckoutAsync({ ticket: payedTicket })).unwrap();
				if (ticketState === TicketState.PAID) {
					console.log('Goodbye!');
				}
				return { spaceNumber, ticketState };
			}
			else {
				throw new Error('Ticket cannot be found!');
			}
		}
		else {
			throw new Error('Ticket cannot be found!');
		}
	}
);

type PaymentReceipt = string[];

export interface CalculatePricePaidTicketReturnValue {
	ticketPrice: number;
	paymentReceipt: PaymentReceipt;
}

export const calculatePrice = (barCode: BarCode): AppThunk<number | CalculatePricePaidTicketReturnValue | void> =>
	(dispatch, getState) => {
		const ticket = selectTicketWithBarCode(barCode)(getState());
		if (ticket) {
			if (ticket.payment) {
				const issueDate = new Date(ticket.dateOfIssuance);
				const paymentDate = new Date(ticket.payment.paymentDate);
				const ticketPrice = calculateTicketPrice(issueDate, paymentDate);
				return {
					ticketPrice: 0,
					paymentReceipt: [
						`Payed: ${ticketPrice}â‚¬`,
						`Payment date: ${getFormattedPaymentDate(new Date(ticket.payment.paymentDate))}`,
						`Payment method: ${ticket.payment.paymentMethod}`,
					],
				};
			}
			else {
				const issueDate = new Date(ticket.dateOfIssuance);
				const paymentDate = new Date(Date.now()); // Date.now() gets mocked within the test!
				const ticketPrice = calculateTicketPrice(issueDate, paymentDate);
				return ticketPrice;
			}
		}
		else {
			throw new Error('Ticket cannot be found!');
		}
	};

export const getTicketState = (barCode: BarCode): AppThunk<TicketState> =>
	(dispatch, getState) => {
		const ticket = selectTicketWithBarCode(barCode)(getState());
		if (ticket) {
			if (ticket.payment) {
				const currentDate = new Date(Date.now()); // Date.now() gets mocked within the test!
				const ticketState = calculateTicketState(ticket, currentDate);
				return ticketState;
			}
			else {
				return TicketState.UNPAID;
			}
		}
		else {
			throw new Error('Ticket cannot be found!');
		}
	};

export const getFreeSpaces = (): AppThunk<number> =>
	(dispatch, getState) => {
		const amountOfFreeParkingSpaces = selectAmountOfFreeParkingSpaces(getState());
		return amountOfFreeParkingSpaces;
	};

export default ParkingGarageSlice.reducer;
